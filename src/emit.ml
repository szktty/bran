open Spotlib.Base
open Printf
open Erlang

let gen_var s = "_" ^ s

let gen_arg (x, _) = gen_var x

let gen_exp oc = function
  | Atom s -> bprintf oc "'%s'" s
  | _ -> bprintf oc "ok"

let gen_def oc = function
  | FunDef { name = (Id.L x, _); args = args; body = body } ->
    bprintf oc "%s(%s) -> " x
      (Xstring.concat_list ", " gen_arg args);
    gen_exp oc body;
    bprintf oc ".\n"
  | _ -> ()

let gen_export oc defs =
  let sigs =
    List.rev & List.fold_left (fun accu def ->
        match def with
        | FunDef { name = (Id.L x, _); args = args } -> 
          (sprintf "%s/%d" x (List.length args)) :: accu
        | _ -> accu) [] defs
  in
  if List.length sigs > 0 then
    bprintf oc "-export([%s]).\n\n" (String.concat ", " sigs)

let f name oc (Prog defs) =
  if !Config.escript then begin
    bprintf oc "#!/usr/bin/env escript\n\n";
    bprintf oc "%%%%! -pa erl\n" (* adhoc: standard library path *)
  end;

  bprintf oc "%%%% Note: This code is automatically generated by bran. Do not modify it.\n\n";

  if not !Config.escript then begin
    bprintf oc "-module(%s).\n\n" name;
    gen_export oc defs
  end;

  List.iter (gen_def oc) defs;

  bprintf oc "\n%%%% End.\n"
